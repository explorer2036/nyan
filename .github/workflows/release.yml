name: Go Build && Release
on:
  push:
    tags:
      - '*'

jobs:
  builds:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: import GPG key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: run GoReleaser for linux
        uses: goreleaser/goreleaser-action@v5
        with:
          args: release --config .goreleaser.yml --clean --skip=announce,validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: install Tree
        run: |
          sudo apt-get install tree
          tree dist

          version=$(echo ${{ github.ref_name }} | sed -e 's/v//')
          repo_name=${{ github.event.repository.name }}
          checksums=${repo_name}_${version}_SHA256SUMS
          for entry in `ls dist/*.zip`; do
            zipfile=$(echo $entry | awk -F'/' '{print $NF}')
            sha256sum ${zipfile} >> ${checksums}
          done
          cat ${checksums}

          gpg --batch --local-user ${{ steps.gpg.outputs.fingerprint }} --output ${checksums}.sig --detach-sign ${checksums}
          gpg --verify ${checksums}.sig ${checksums}

# jobs:
#   builds:
#     strategy:
#       matrix:
#         # os: [ubuntu-latest, windows-latest, macos-latest]
#         os: [ubuntu-latest]
#     runs-on: ${{ matrix.os }}
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#       - uses: actions/setup-go@v5
#         with:
#           go-version: '1.21'

#       - name: Run GoReleaser for linux
#         if: matrix.os == 'ubuntu-latest'
#         uses: goreleaser/goreleaser-action@v5
#         with:
#           args: release --config .goreleaser.yml --clean --skip=announce,validate
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Run GoReleaser for darwin
#         if: matrix.os == 'macos-latest'
#         uses: goreleaser/goreleaser-action@v5
#         with:
#           args: release --config .goreleaser-darwin.yml --clean --skip=announce,validate
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # merge-checksums:
  #   needs: builds
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Get version from tag name
  #     id: version
  #     run: echo "version=$(echo ${{ github.ref_name }} | sed -e 's/v//')" >> $GITHUB_OUTPUT
    
  #   - name: Download all checksums assets
  #     uses: robinraju/release-downloader@v1.9
  #     with:
  #       repository: ${{ github.repository }}
  #       tag: ${{ github.ref_name }}
  #       fileName: "*_checksums.txt"
  #       out-file-path: "downloaded"
    
  #   - name: Merge all checksums assets
  #     id: me rge
  #     run: |
  #       cat downloaded/*_checksums.txt > ${{ github.event.repository.name }}_${{ steps.version.outputs.version }}_checksums.txt
  #       echo "filename=${{ github.event.repository.name }}_${{ steps.version.outputs.version }}_checksums.txt" >> $GITHUB_OUTPUT
  
  #   - name: Delete the checksums assets
  #     uses: mknejp/delete-release-assets@v1
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       tag: ${{ github.ref_name }}
  #       repository: ${{ github.repository }}
  #       assets: "*_checksums.txt"

  #   - name: Upload the merged checksums
  #     uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{ secrets.GITHUB_TOKEN }}
  #       file: ${{ steps.merge.outputs.filename }}
  #       asset_name: ${{ steps.merge.outputs.filename }}
  #       tag: ${{ github.ref }}
  #       overwrite: true
