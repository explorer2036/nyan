name: Go Build && Release
on:
  push:
    tags:
      - '*'

jobs:
  build-and-publish:
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/github-script@v6
        id: configure-changelog
        with:
          result-encoding: string
          script: |
            const changelogTypes = [
              {type: "feat", section: "🎉 **What's new:**", hidden: false},
              {type: "chore", section: "🔧 **Misc**", hidden: false},
              {type: "fix", section: "🐛 **Bug fixes:**", hidden: false},
            ]
            return JSON.stringify(changelogTypes)
      
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.CZI_RELEASE_PLEASE_APP_ID }}
          private-key: ${{ secrets.CZI_RELEASE_PLEASE_PK }}
      
      - name: Import GPG key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: release please
        uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: simple
          bump-minor-pre-major: true
          changelog-types: ${{ steps.configure-changelog.outputs.result }}
          token: ${{ steps.generate-token.outputs.token }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run GoReleaser for linux
        if: matrix.os == 'ubuntu-latest' && ${{ steps.release.outputs.release_created }}
        uses: goreleaser/goreleaser-action@v5
        with:
          args: release --config .goreleaser.yml --clean --skip=announce,validate
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      # - name: Run GoReleaser for darwin
      #   if: matrix.os == 'macos-latest'
      #   uses: goreleaser/goreleaser-action@v5
      #   with:
      #     args: release --config .goreleaser-darwin.yml --clean --skip=announce,validate
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

      # - name: Run GoReleaser for windows
      #   if: matrix.os == 'windows-latest'
      #   uses: goreleaser/goreleaser-action@v5
      #   with:
      #     args: release --config .goreleaser-windows.yml --clean --skip=announce,validate
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # sha256sums-and-gpg-signature:
  #   needs: build-and-publish
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Import GPG key
  #       id: gpg
  #       uses: crazy-max/ghaction-import-gpg@v6
  #       with:
  #         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
  #         passphrase: ${{ secrets.GPG_PASSPHRASE }}
      
  #     - name: Download published archives
  #       uses: robinraju/release-downloader@v1.9
  #       with:
  #         repository: ${{ github.repository }}
  #         tag: ${{ github.ref_name }}
  #         fileName: "*.zip"
  #         out-file-path: "artifacts"

  #     - name: Generate the sha256 checksums and GPG signature
  #       id: generate
  #       run: |
  #         cd artifacts
  #         # generate the sha256 checksums
  #         version=$(echo ${{ github.ref_name }} | sed -e 's/v//')
  #         repo_name=${{ github.event.repository.name }}
  #         checksums=${repo_name}_${version}_SHA256SUMS
  #         for entry in `ls *.zip`; do
  #           sha256sum ${entry} >> ${checksums}
  #         done
          
  #         # generate the GPG signature
  #         gpg --batch --local-user ${{ steps.gpg.outputs.fingerprint }} --output ${checksums}.sig --detach-sign ${checksums}

  #         echo "checksums=${checksums}" >> $GITHUB_OUTPUT
  #         echo "signature=${checksums}.sig" >> $GITHUB_OUTPUT
  
  #     - name: Upload the sha256 checksums
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: artifacts/${{ steps.generate.outputs.checksums }}
  #         asset_name: ${{ steps.generate.outputs.checksums }}
  #         tag: ${{ github.ref }}

  #     - name: Upload the GPG signature
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: artifacts/${{ steps.generate.outputs.signature }}
  #         asset_name: ${{ steps.generate.outputs.signature }}
  #         tag: ${{ github.ref }}
